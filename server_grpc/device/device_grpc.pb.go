// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: device/device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	GetDeviceStatus(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_GetDeviceStatusClient, error)
	GetDeviceConfig(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceConfig, error)
	SetDeviceConfig(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*ReturnValue, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GetDeviceStatus(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_GetDeviceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], "/device.RouteGuide/GetDeviceStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideGetDeviceStatusClient{stream}
	return x, nil
}

type RouteGuide_GetDeviceStatusClient interface {
	Send(*DeviceId) error
	Recv() (*DeviceStatus, error)
	grpc.ClientStream
}

type routeGuideGetDeviceStatusClient struct {
	grpc.ClientStream
}

func (x *routeGuideGetDeviceStatusClient) Send(m *DeviceId) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideGetDeviceStatusClient) Recv() (*DeviceStatus, error) {
	m := new(DeviceStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) GetDeviceConfig(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceConfig, error) {
	out := new(DeviceConfig)
	err := c.cc.Invoke(ctx, "/device.RouteGuide/GetDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) SetDeviceConfig(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*ReturnValue, error) {
	out := new(ReturnValue)
	err := c.cc.Invoke(ctx, "/device.RouteGuide/SetDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	GetDeviceStatus(RouteGuide_GetDeviceStatusServer) error
	GetDeviceConfig(context.Context, *DeviceId) (*DeviceConfig, error)
	SetDeviceConfig(context.Context, *DeviceConfig) (*ReturnValue, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) GetDeviceStatus(RouteGuide_GetDeviceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedRouteGuideServer) GetDeviceConfig(context.Context, *DeviceId) (*DeviceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfig not implemented")
}
func (UnimplementedRouteGuideServer) SetDeviceConfig(context.Context, *DeviceConfig) (*ReturnValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceConfig not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_GetDeviceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).GetDeviceStatus(&routeGuideGetDeviceStatusServer{stream})
}

type RouteGuide_GetDeviceStatusServer interface {
	Send(*DeviceStatus) error
	Recv() (*DeviceId, error)
	grpc.ServerStream
}

type routeGuideGetDeviceStatusServer struct {
	grpc.ServerStream
}

func (x *routeGuideGetDeviceStatusServer) Send(m *DeviceStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideGetDeviceStatusServer) Recv() (*DeviceId, error) {
	m := new(DeviceId)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_GetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RouteGuide/GetDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetDeviceConfig(ctx, req.(*DeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_SetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).SetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RouteGuide/SetDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).SetDeviceConfig(ctx, req.(*DeviceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceConfig",
			Handler:    _RouteGuide_GetDeviceConfig_Handler,
		},
		{
			MethodName: "SetDeviceConfig",
			Handler:    _RouteGuide_SetDeviceConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeviceStatus",
			Handler:       _RouteGuide_GetDeviceStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device/device.proto",
}
